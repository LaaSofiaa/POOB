#BlueJ class context
comment0.target=Composed
comment0.text=\r\n\ Clase\ que\ representa\ una\ actividad\ compuesta\ en\ un\ proyecto.\r\n\ Extiende\ la\ clase\ Activity.\r\n
comment1.params=name\ cost\ parallel
comment1.target=Composed(java.lang.String,\ java.lang.Integer,\ boolean)
comment1.text=\r\n\ Constructor\ para\ crear\ una\ actividad\ compuesta.\r\n\ @param\ name\ Nombre\ de\ la\ actividad\ compuesta.\r\n\ @param\ cost\ Costo\ de\ la\ actividad\ compuesta.\r\n\ @param\ parallel\ Indica\ si\ la\ actividad\ compuesta\ es\ paralela\ (true)\ o\ secuencial\ (false).\r\n
comment2.params=a
comment2.target=void\ add(Activity)
comment2.text=\r\n\ Agrega\ una\ nueva\ actividad\ a\ la\ actividad\ compuesta.\r\n\ @param\ a\ Actividad\ a\ agregar.\r\n
comment3.params=
comment3.target=int\ cost()
comment4.params=
comment4.target=int\ time()
comment5.params=dUnknow\ dError\ dEmpty
comment5.target=int\ time(int,\ int,\ int)
comment5.text=\r\n\ Calcula\ un\ tiempo\ estimado\ utilizando\ valores\ por\ defecto\ cuando\ sea\ necesario.\r\n\ @param\ dUnknow\ Tiempo\ estimado\ para\ actividades\ desconocidas.\r\n\ @param\ dError\ Tiempo\ estimado\ para\ actividades\ con\ errores.\r\n\ @param\ dEmpty\ Tiempo\ estimado\ cuando\ la\ actividad\ compuesta\ no\ tiene\ actividades.\r\n\ @return\ Tiempo\ estimado\ de\ las\ actividades.\r\n
comment6.params=modality
comment6.target=int\ time(char)
comment6.text=\r\n\ Calcula\ un\ tiempo\ estimado\ considerando\ la\ modalidad\ (promedio\ o\ m\u00E1ximo)\ de\ las\ actividades\ conocidas.\r\n\ @param\ modality\ 'A'\ para\ promedio,\ 'M'\ para\ m\u00E1ximo.\r\n\ @return\ Tiempo\ estimado\ de\ las\ actividades.\r\n\ @throws\ ProjectException\ Si\ no\ se\ puede\ calcular\ el\ tiempo.\r\n
comment7.params=activity
comment7.target=int\ time(java.lang.String)
comment7.text=\r\n\ Calculates\ an\ time\ of\ a\ subactivity\r\n\ @return\ time\r\n\ @throws\ ProjectException\ UNKNOWN,\ if\ it\ doesn't\ exist.\ IMPOSSIBLE,\ if\ it\ can't\ be\ calculated\r\n
comment8.params=
comment8.target=java.lang.String\ data()
comment8.text=\r\n\ Devuelve\ los\ datos\ de\ la\ actividad,\ incluyendo\ su\ nombre,\ tipo\ (paralela\ o\ secuencial)\ y\ los\ datos\ de\ sus\ subactividades.\r\n\ @return\ Una\ cadena\ de\ texto\ con\ los\ datos\ de\ la\ actividad\ y\ sus\ subactividades.\r\n\ @throws\ ProjectException\ Si\ hay\ alg\u00FAn\ error\ al\ obtener\ los\ datos\ de\ las\ subactividades.\r\n
comment9.params=
comment9.target=java.util.ArrayList\ getActivities()
numComments=10
